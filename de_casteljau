typedef struct Point{
	int x;
	int y;
}Point;
void line(CDC * pDC, Point p[], int color){
	for(int i=0; i<pointnum; i++){	
		pDC->MoveTo( p[i].x, p[i].y);
		pDC->LineTo(p[i+1].x, p[i+1].y);
	}
	return ;
}
float hornbez(int degree, float* array0, float t){
	int r,i;
	float t1;
	float parray[10];
	t1 = 1.0 - t;
	for(i = 0; i <= degree; i++){
		parray[i] = array0[i];
	}
	for(r = 1; r<= degree; r ++)
		for(i = 0; i <= degree - r; i++){
			parray[i] = t1 * parray[i] + t * parray[i+1];
		}
	return parray[0];
}

void bezier(CDC *pDC,Point p[], int color){
	float bx[pointnum];
	float by[pointnum];

	for(int j=0, i=0; i<pointnum; i++){
		bx [j] = p[i].x * 1.0;
		by [j] = p[i].y * 1.0;
		j++;
	}
	float t = 0.0;
	int num = 1000;
	int x,y;

	for(int j = 0; j < num; j++){
		t+=1.0/num;
		x = (int)hornbez(pointnum - 1, bx, t);
		y = (int)hornbez(pointnum - 1, by, t);
		pDC->SetPixel( x, y, color);
	}
}
// Cde_casteljauView 绘制
void Cde_casteljauView::OnDraw(CDC* pDC)
{
	Cde_casteljauDoc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);

	Point p[4]={100,100,300,400,500,50,750,400};
	line(pDC,p,RGB(255,0,0));
	bezier(pDC,p,RGB(0,0,255));
}
